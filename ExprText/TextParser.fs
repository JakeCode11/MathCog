// Implementation file for parser generated by fsyacc
module starPadSDK.MathExpr.TextInternals.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open starPadSDK.MathExpr
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"

// *****Note! This is all inside a "module starPadSDK.MathExpr.TextInternals.Parser" set by command-line option. That, as well as using fslex
//             and fsyacc on TextLexer.fsl as well as this file, happen because I hand-made changes to the ExprText.fsproj file to:
//       1. change the reference to the file name (<Content Include="TextLexer.fsl" />) for instance to FsLex and FsYacc rather than Content.
//       2. add a subelement Module inside the FsYacc entry to set the module name.
//       3. add a subelement Open inside the FsYacc entry to get the .fsi file as well to open starPadSDK.MathExpr
//       4. change the <Import ... /> line to import FSharp.PowerPack.Targets rather than (I think) Microsoft.FSharp.Targets.
open System
open starPadSDK.MathExpr

let makeplus args =
    if List.length args > 1 then new CompositeExpr(WellKnownSym.plus, Array.of_list args) :> Expr else args.[0]
let maketimes args =
    if List.length args > 1 then new CompositeExpr(WellKnownSym.times, Array.of_list args) :> Expr else args.[0]

# 23 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LE
  | GE
  | NE
  | PM
  | MP
  | ERRS
  | ERRE
  | LSB
  | RSB
  | US
  | LT
  | GT
  | COMMA
  | LP
  | RP
  | LCB
  | RCB
  | EQ
  | FACT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | POW
  | VB
  | LLT
  | GGT
  | ID of (string)
  | WKS of (string)
  | LETTERSYM
  | GROUPEDLETTERSYM
  | WORDSYM
  | NULL
  | TOKEN of (string)
  | INTEGER of (string)
  | DOUBLE of (float)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_NE
    | TOKEN_PM
    | TOKEN_MP
    | TOKEN_ERRS
    | TOKEN_ERRE
    | TOKEN_LSB
    | TOKEN_RSB
    | TOKEN_US
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_COMMA
    | TOKEN_LP
    | TOKEN_RP
    | TOKEN_LCB
    | TOKEN_RCB
    | TOKEN_EQ
    | TOKEN_FACT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_POW
    | TOKEN_VB
    | TOKEN_LLT
    | TOKEN_GGT
    | TOKEN_ID
    | TOKEN_WKS
    | TOKEN_LETTERSYM
    | TOKEN_GROUPEDLETTERSYM
    | TOKEN_WORDSYM
    | TOKEN_NULL
    | TOKEN_TOKEN
    | TOKEN_INTEGER
    | TOKEN_DOUBLE
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startexpr
    | NONTERM_expr
    | NONTERM_relnexpr
    | NONTERM_plusexpr
    | NONTERM_timesexpr
    | NONTERM_powerexpr
    | NONTERM_nonpfxpowerexpr
    | NONTERM_prefixexpr
    | NONTERM_postfixexpr
    | NONTERM_primaryexpr
    | NONTERM_primaryexprnovb
    | NONTERM_arrlist
    | NONTERM_arglist
    | NONTERM_sym
    | NONTERM_number
    | NONTERM_realnumber
    | NONTERM_doublenumber
    | NONTERM_integernumber
    | NONTERM_complexnumber
    | NONTERM_lettersym
    | NONTERM_groupedlettersym
    | NONTERM_lettersymlist
    | NONTERM_wordsym
    | NONTERM_wellknownsym

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LE  -> 1 
  | GE  -> 2 
  | NE  -> 3 
  | PM  -> 4 
  | MP  -> 5 
  | ERRS  -> 6 
  | ERRE  -> 7 
  | LSB  -> 8 
  | RSB  -> 9 
  | US  -> 10 
  | LT  -> 11 
  | GT  -> 12 
  | COMMA  -> 13 
  | LP  -> 14 
  | RP  -> 15 
  | LCB  -> 16 
  | RCB  -> 17 
  | EQ  -> 18 
  | FACT  -> 19 
  | PLUS  -> 20 
  | MINUS  -> 21 
  | TIMES  -> 22 
  | DIVIDE  -> 23 
  | POW  -> 24 
  | VB  -> 25 
  | LLT  -> 26 
  | GGT  -> 27 
  | ID _ -> 28 
  | WKS _ -> 29 
  | LETTERSYM  -> 30 
  | GROUPEDLETTERSYM  -> 31 
  | WORDSYM  -> 32 
  | NULL  -> 33 
  | TOKEN _ -> 34 
  | INTEGER _ -> 35 
  | DOUBLE _ -> 36 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LE 
  | 2 -> TOKEN_GE 
  | 3 -> TOKEN_NE 
  | 4 -> TOKEN_PM 
  | 5 -> TOKEN_MP 
  | 6 -> TOKEN_ERRS 
  | 7 -> TOKEN_ERRE 
  | 8 -> TOKEN_LSB 
  | 9 -> TOKEN_RSB 
  | 10 -> TOKEN_US 
  | 11 -> TOKEN_LT 
  | 12 -> TOKEN_GT 
  | 13 -> TOKEN_COMMA 
  | 14 -> TOKEN_LP 
  | 15 -> TOKEN_RP 
  | 16 -> TOKEN_LCB 
  | 17 -> TOKEN_RCB 
  | 18 -> TOKEN_EQ 
  | 19 -> TOKEN_FACT 
  | 20 -> TOKEN_PLUS 
  | 21 -> TOKEN_MINUS 
  | 22 -> TOKEN_TIMES 
  | 23 -> TOKEN_DIVIDE 
  | 24 -> TOKEN_POW 
  | 25 -> TOKEN_VB 
  | 26 -> TOKEN_LLT 
  | 27 -> TOKEN_GGT 
  | 28 -> TOKEN_ID 
  | 29 -> TOKEN_WKS 
  | 30 -> TOKEN_LETTERSYM 
  | 31 -> TOKEN_GROUPEDLETTERSYM 
  | 32 -> TOKEN_WORDSYM 
  | 33 -> TOKEN_NULL 
  | 34 -> TOKEN_TOKEN 
  | 35 -> TOKEN_INTEGER 
  | 36 -> TOKEN_DOUBLE 
  | 39 -> TOKEN_end_of_input
  | 37 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startexpr 
    | 1 -> NONTERM_expr 
    | 2 -> NONTERM_relnexpr 
    | 3 -> NONTERM_relnexpr 
    | 4 -> NONTERM_relnexpr 
    | 5 -> NONTERM_relnexpr 
    | 6 -> NONTERM_relnexpr 
    | 7 -> NONTERM_relnexpr 
    | 8 -> NONTERM_relnexpr 
    | 9 -> NONTERM_plusexpr 
    | 10 -> NONTERM_plusexpr 
    | 11 -> NONTERM_plusexpr 
    | 12 -> NONTERM_plusexpr 
    | 13 -> NONTERM_plusexpr 
    | 14 -> NONTERM_timesexpr 
    | 15 -> NONTERM_timesexpr 
    | 16 -> NONTERM_timesexpr 
    | 17 -> NONTERM_timesexpr 
    | 18 -> NONTERM_powerexpr 
    | 19 -> NONTERM_powerexpr 
    | 20 -> NONTERM_nonpfxpowerexpr 
    | 21 -> NONTERM_nonpfxpowerexpr 
    | 22 -> NONTERM_prefixexpr 
    | 23 -> NONTERM_prefixexpr 
    | 24 -> NONTERM_prefixexpr 
    | 25 -> NONTERM_postfixexpr 
    | 26 -> NONTERM_postfixexpr 
    | 27 -> NONTERM_postfixexpr 
    | 28 -> NONTERM_primaryexpr 
    | 29 -> NONTERM_primaryexpr 
    | 30 -> NONTERM_primaryexpr 
    | 31 -> NONTERM_primaryexpr 
    | 32 -> NONTERM_primaryexprnovb 
    | 33 -> NONTERM_primaryexprnovb 
    | 34 -> NONTERM_primaryexprnovb 
    | 35 -> NONTERM_primaryexprnovb 
    | 36 -> NONTERM_primaryexprnovb 
    | 37 -> NONTERM_primaryexprnovb 
    | 38 -> NONTERM_primaryexprnovb 
    | 39 -> NONTERM_arrlist 
    | 40 -> NONTERM_arrlist 
    | 41 -> NONTERM_arglist 
    | 42 -> NONTERM_arglist 
    | 43 -> NONTERM_arglist 
    | 44 -> NONTERM_sym 
    | 45 -> NONTERM_sym 
    | 46 -> NONTERM_sym 
    | 47 -> NONTERM_sym 
    | 48 -> NONTERM_sym 
    | 49 -> NONTERM_number 
    | 50 -> NONTERM_number 
    | 51 -> NONTERM_realnumber 
    | 52 -> NONTERM_realnumber 
    | 53 -> NONTERM_doublenumber 
    | 54 -> NONTERM_integernumber 
    | 55 -> NONTERM_complexnumber 
    | 56 -> NONTERM_lettersym 
    | 57 -> NONTERM_lettersym 
    | 58 -> NONTERM_groupedlettersym 
    | 59 -> NONTERM_lettersymlist 
    | 60 -> NONTERM_lettersymlist 
    | 61 -> NONTERM_wordsym 
    | 62 -> NONTERM_wordsym 
    | 63 -> NONTERM_wellknownsym 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 39 
let _fsyacc_tagOfErrorTerminal = 37

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LE  -> "LE" 
  | GE  -> "GE" 
  | NE  -> "NE" 
  | PM  -> "PM" 
  | MP  -> "MP" 
  | ERRS  -> "ERRS" 
  | ERRE  -> "ERRE" 
  | LSB  -> "LSB" 
  | RSB  -> "RSB" 
  | US  -> "US" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | COMMA  -> "COMMA" 
  | LP  -> "LP" 
  | RP  -> "RP" 
  | LCB  -> "LCB" 
  | RCB  -> "RCB" 
  | EQ  -> "EQ" 
  | FACT  -> "FACT" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | POW  -> "POW" 
  | VB  -> "VB" 
  | LLT  -> "LLT" 
  | GGT  -> "GGT" 
  | ID _ -> "ID" 
  | WKS _ -> "WKS" 
  | LETTERSYM  -> "LETTERSYM" 
  | GROUPEDLETTERSYM  -> "GROUPEDLETTERSYM" 
  | WORDSYM  -> "WORDSYM" 
  | NULL  -> "NULL" 
  | TOKEN _ -> "TOKEN" 
  | INTEGER _ -> "INTEGER" 
  | DOUBLE _ -> "DOUBLE" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | PM  -> (null : System.Object) 
  | MP  -> (null : System.Object) 
  | ERRS  -> (null : System.Object) 
  | ERRE  -> (null : System.Object) 
  | LSB  -> (null : System.Object) 
  | RSB  -> (null : System.Object) 
  | US  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | LP  -> (null : System.Object) 
  | RP  -> (null : System.Object) 
  | LCB  -> (null : System.Object) 
  | RCB  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | FACT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | VB  -> (null : System.Object) 
  | LLT  -> (null : System.Object) 
  | GGT  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WKS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LETTERSYM  -> (null : System.Object) 
  | GROUPEDLETTERSYM  -> (null : System.Object) 
  | WORDSYM  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | TOKEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INTEGER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOUBLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 10us; 65535us; 0us; 1us; 43us; 81us; 52us; 64us; 63us; 64us; 66us; 81us; 75us; 81us; 78us; 81us; 82us; 83us; 104us; 105us; 118us; 119us; 16us; 65535us; 0us; 2us; 10us; 4us; 11us; 5us; 12us; 6us; 13us; 7us; 14us; 8us; 15us; 9us; 43us; 2us; 52us; 2us; 63us; 2us; 66us; 2us; 75us; 2us; 78us; 2us; 82us; 2us; 104us; 2us; 118us; 2us; 16us; 65535us; 0us; 3us; 10us; 3us; 11us; 3us; 12us; 3us; 13us; 3us; 14us; 3us; 15us; 3us; 43us; 3us; 52us; 3us; 63us; 3us; 66us; 3us; 75us; 3us; 78us; 3us; 82us; 3us; 104us; 3us; 118us; 3us; 20us; 65535us; 0us; 16us; 10us; 16us; 11us; 16us; 12us; 16us; 13us; 16us; 14us; 16us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 43us; 16us; 52us; 16us; 63us; 16us; 66us; 16us; 75us; 16us; 78us; 16us; 82us; 16us; 104us; 16us; 118us; 16us; 23us; 65535us; 0us; 25us; 10us; 25us; 11us; 25us; 12us; 25us; 13us; 25us; 14us; 25us; 15us; 25us; 17us; 25us; 19us; 25us; 21us; 25us; 23us; 25us; 26us; 27us; 29us; 30us; 32us; 33us; 43us; 25us; 52us; 25us; 63us; 25us; 66us; 25us; 75us; 25us; 78us; 25us; 82us; 25us; 104us; 25us; 118us; 25us; 6us; 65535us; 16us; 28us; 18us; 28us; 20us; 28us; 22us; 28us; 24us; 28us; 35us; 36us; 25us; 65535us; 0us; 31us; 10us; 31us; 11us; 31us; 12us; 31us; 13us; 31us; 14us; 31us; 15us; 31us; 17us; 31us; 19us; 31us; 21us; 31us; 23us; 31us; 26us; 31us; 29us; 31us; 32us; 31us; 38us; 39us; 40us; 41us; 43us; 31us; 52us; 31us; 63us; 31us; 66us; 31us; 75us; 31us; 78us; 31us; 82us; 31us; 104us; 31us; 118us; 31us; 31us; 65535us; 0us; 37us; 10us; 37us; 11us; 37us; 12us; 37us; 13us; 37us; 14us; 37us; 15us; 37us; 16us; 34us; 17us; 37us; 18us; 34us; 19us; 37us; 20us; 34us; 21us; 37us; 22us; 34us; 23us; 37us; 24us; 34us; 26us; 37us; 29us; 37us; 32us; 37us; 35us; 34us; 38us; 37us; 40us; 37us; 43us; 37us; 52us; 37us; 63us; 37us; 66us; 37us; 75us; 37us; 78us; 37us; 82us; 37us; 104us; 37us; 118us; 37us; 31us; 65535us; 0us; 42us; 10us; 42us; 11us; 42us; 12us; 42us; 13us; 42us; 14us; 42us; 15us; 42us; 16us; 42us; 17us; 42us; 18us; 42us; 19us; 42us; 20us; 42us; 21us; 42us; 22us; 42us; 23us; 42us; 24us; 42us; 26us; 42us; 29us; 42us; 32us; 42us; 35us; 42us; 38us; 42us; 40us; 42us; 43us; 42us; 52us; 42us; 63us; 42us; 66us; 42us; 75us; 42us; 78us; 42us; 82us; 42us; 104us; 42us; 118us; 42us; 35us; 65535us; 0us; 48us; 10us; 48us; 11us; 48us; 12us; 48us; 13us; 48us; 14us; 48us; 15us; 48us; 16us; 48us; 17us; 48us; 18us; 48us; 19us; 48us; 20us; 48us; 21us; 48us; 22us; 48us; 23us; 48us; 24us; 48us; 26us; 48us; 29us; 48us; 32us; 48us; 35us; 48us; 38us; 48us; 40us; 48us; 43us; 48us; 49us; 50us; 52us; 47us; 53us; 54us; 56us; 57us; 58us; 59us; 63us; 48us; 66us; 48us; 75us; 48us; 78us; 48us; 82us; 48us; 104us; 48us; 118us; 48us; 1us; 65535us; 66us; 69us; 4us; 65535us; 43us; 44us; 66us; 67us; 75us; 76us; 78us; 79us; 35us; 65535us; 0us; 61us; 10us; 61us; 11us; 61us; 12us; 61us; 13us; 61us; 14us; 61us; 15us; 61us; 16us; 61us; 17us; 61us; 18us; 61us; 19us; 61us; 20us; 61us; 21us; 61us; 22us; 61us; 23us; 61us; 24us; 61us; 26us; 61us; 29us; 61us; 32us; 61us; 35us; 61us; 38us; 61us; 40us; 61us; 43us; 61us; 49us; 61us; 52us; 61us; 53us; 61us; 56us; 61us; 58us; 61us; 63us; 61us; 66us; 61us; 75us; 61us; 78us; 61us; 82us; 61us; 104us; 61us; 118us; 61us; 35us; 65535us; 0us; 62us; 10us; 62us; 11us; 62us; 12us; 62us; 13us; 62us; 14us; 62us; 15us; 62us; 16us; 62us; 17us; 62us; 18us; 62us; 19us; 62us; 20us; 62us; 21us; 62us; 22us; 62us; 23us; 62us; 24us; 62us; 26us; 62us; 29us; 62us; 32us; 62us; 35us; 62us; 38us; 62us; 40us; 62us; 43us; 62us; 49us; 62us; 52us; 62us; 53us; 62us; 56us; 62us; 58us; 62us; 63us; 62us; 66us; 62us; 75us; 62us; 78us; 62us; 82us; 62us; 104us; 62us; 118us; 62us; 37us; 65535us; 0us; 89us; 10us; 89us; 11us; 89us; 12us; 89us; 13us; 89us; 14us; 89us; 15us; 89us; 16us; 89us; 17us; 89us; 18us; 89us; 19us; 89us; 20us; 89us; 21us; 89us; 22us; 89us; 23us; 89us; 24us; 89us; 26us; 89us; 29us; 89us; 32us; 89us; 35us; 89us; 38us; 89us; 40us; 89us; 43us; 89us; 49us; 89us; 52us; 89us; 53us; 89us; 56us; 89us; 58us; 89us; 63us; 89us; 66us; 89us; 75us; 89us; 78us; 89us; 82us; 89us; 95us; 96us; 97us; 98us; 104us; 89us; 118us; 89us; 37us; 65535us; 0us; 91us; 10us; 91us; 11us; 91us; 12us; 91us; 13us; 91us; 14us; 91us; 15us; 91us; 16us; 91us; 17us; 91us; 18us; 91us; 19us; 91us; 20us; 91us; 21us; 91us; 22us; 91us; 23us; 91us; 24us; 91us; 26us; 91us; 29us; 91us; 32us; 91us; 35us; 91us; 38us; 91us; 40us; 91us; 43us; 91us; 49us; 91us; 52us; 91us; 53us; 91us; 56us; 91us; 58us; 91us; 63us; 91us; 66us; 91us; 75us; 91us; 78us; 91us; 82us; 91us; 95us; 91us; 97us; 91us; 104us; 91us; 118us; 91us; 37us; 65535us; 0us; 92us; 10us; 92us; 11us; 92us; 12us; 92us; 13us; 92us; 14us; 92us; 15us; 92us; 16us; 92us; 17us; 92us; 18us; 92us; 19us; 92us; 20us; 92us; 21us; 92us; 22us; 92us; 23us; 92us; 24us; 92us; 26us; 92us; 29us; 92us; 32us; 92us; 35us; 92us; 38us; 92us; 40us; 92us; 43us; 92us; 49us; 92us; 52us; 92us; 53us; 92us; 56us; 92us; 58us; 92us; 63us; 92us; 66us; 92us; 75us; 92us; 78us; 92us; 82us; 92us; 95us; 92us; 97us; 92us; 104us; 92us; 118us; 92us; 35us; 65535us; 0us; 90us; 10us; 90us; 11us; 90us; 12us; 90us; 13us; 90us; 14us; 90us; 15us; 90us; 16us; 90us; 17us; 90us; 18us; 90us; 19us; 90us; 20us; 90us; 21us; 90us; 22us; 90us; 23us; 90us; 24us; 90us; 26us; 90us; 29us; 90us; 32us; 90us; 35us; 90us; 38us; 90us; 40us; 90us; 43us; 90us; 49us; 90us; 52us; 90us; 53us; 90us; 56us; 90us; 58us; 90us; 63us; 90us; 66us; 90us; 75us; 90us; 78us; 90us; 82us; 90us; 104us; 90us; 118us; 90us; 37us; 65535us; 0us; 84us; 10us; 84us; 11us; 84us; 12us; 84us; 13us; 84us; 14us; 84us; 15us; 84us; 16us; 84us; 17us; 84us; 18us; 84us; 19us; 84us; 20us; 84us; 21us; 84us; 22us; 84us; 23us; 84us; 24us; 84us; 26us; 84us; 29us; 84us; 32us; 84us; 35us; 84us; 38us; 84us; 40us; 84us; 43us; 84us; 49us; 84us; 52us; 84us; 53us; 84us; 56us; 84us; 58us; 84us; 63us; 84us; 66us; 84us; 75us; 84us; 78us; 84us; 82us; 84us; 104us; 84us; 108us; 111us; 112us; 111us; 118us; 84us; 35us; 65535us; 0us; 85us; 10us; 85us; 11us; 85us; 12us; 85us; 13us; 85us; 14us; 85us; 15us; 85us; 16us; 85us; 17us; 85us; 18us; 85us; 19us; 85us; 20us; 85us; 21us; 85us; 22us; 85us; 23us; 85us; 24us; 85us; 26us; 85us; 29us; 85us; 32us; 85us; 35us; 85us; 38us; 85us; 40us; 85us; 43us; 85us; 49us; 85us; 52us; 85us; 53us; 85us; 56us; 85us; 58us; 85us; 63us; 85us; 66us; 85us; 75us; 85us; 78us; 85us; 82us; 85us; 104us; 85us; 118us; 85us; 2us; 65535us; 108us; 109us; 112us; 113us; 35us; 65535us; 0us; 86us; 10us; 86us; 11us; 86us; 12us; 86us; 13us; 86us; 14us; 86us; 15us; 86us; 16us; 86us; 17us; 86us; 18us; 86us; 19us; 86us; 20us; 86us; 21us; 86us; 22us; 86us; 23us; 86us; 24us; 86us; 26us; 86us; 29us; 86us; 32us; 86us; 35us; 86us; 38us; 86us; 40us; 86us; 43us; 86us; 49us; 86us; 52us; 86us; 53us; 86us; 56us; 86us; 58us; 86us; 63us; 86us; 66us; 86us; 75us; 86us; 78us; 86us; 82us; 86us; 104us; 86us; 118us; 86us; 35us; 65535us; 0us; 87us; 10us; 87us; 11us; 87us; 12us; 87us; 13us; 87us; 14us; 87us; 15us; 87us; 16us; 87us; 17us; 87us; 18us; 87us; 19us; 87us; 20us; 87us; 21us; 87us; 22us; 87us; 23us; 87us; 24us; 87us; 26us; 87us; 29us; 87us; 32us; 87us; 35us; 87us; 38us; 87us; 40us; 87us; 43us; 87us; 49us; 87us; 52us; 87us; 53us; 87us; 56us; 87us; 58us; 87us; 63us; 87us; 66us; 87us; 75us; 87us; 78us; 87us; 82us; 87us; 104us; 87us; 118us; 87us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 12us; 29us; 46us; 67us; 91us; 98us; 124us; 156us; 188us; 224us; 226us; 231us; 267us; 303us; 341us; 379us; 417us; 453us; 491us; 527us; 530us; 566us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 7us; 1us; 3us; 4us; 5us; 6us; 7us; 8us; 5us; 2us; 10us; 11us; 12us; 13us; 7us; 3us; 3us; 4us; 5us; 6us; 7us; 8us; 7us; 3us; 4us; 4us; 5us; 6us; 7us; 8us; 7us; 3us; 4us; 5us; 5us; 6us; 7us; 8us; 7us; 3us; 4us; 5us; 6us; 6us; 7us; 8us; 7us; 3us; 4us; 5us; 6us; 7us; 7us; 8us; 7us; 3us; 4us; 5us; 6us; 7us; 8us; 8us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 4us; 9us; 15us; 16us; 17us; 1us; 10us; 4us; 10us; 15us; 16us; 17us; 1us; 11us; 4us; 11us; 15us; 16us; 17us; 1us; 12us; 4us; 12us; 15us; 16us; 17us; 1us; 13us; 4us; 13us; 15us; 16us; 17us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 17us; 2us; 18us; 19us; 1us; 19us; 1us; 19us; 4us; 20us; 21us; 26us; 27us; 1us; 21us; 1us; 21us; 3us; 22us; 26us; 27us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 26us; 2us; 26us; 43us; 1us; 26us; 1us; 27us; 3us; 28us; 30us; 31us; 2us; 28us; 31us; 1us; 29us; 1us; 29us; 1us; 29us; 2us; 30us; 34us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 34us; 2us; 35us; 36us; 2us; 35us; 43us; 1us; 35us; 2us; 36us; 40us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 39us; 2us; 39us; 43us; 1us; 39us; 1us; 40us; 2us; 40us; 43us; 1us; 40us; 1us; 42us; 1us; 43us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 55us; 1us; 55us; 1us; 55us; 1us; 55us; 2us; 56us; 57us; 2us; 56us; 57us; 2us; 56us; 57us; 1us; 56us; 1us; 57us; 1us; 57us; 1us; 57us; 1us; 58us; 1us; 58us; 1us; 58us; 1us; 58us; 2us; 59us; 60us; 1us; 60us; 1us; 60us; 2us; 61us; 62us; 2us; 61us; 62us; 2us; 61us; 62us; 1us; 61us; 1us; 62us; 1us; 62us; 1us; 62us; 1us; 63us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 12us; 18us; 26us; 34us; 42us; 50us; 58us; 66us; 68us; 70us; 72us; 74us; 76us; 78us; 83us; 85us; 90us; 92us; 97us; 99us; 104us; 106us; 111us; 113us; 115us; 117us; 119us; 121us; 123us; 126us; 128us; 130us; 135us; 137us; 139us; 143us; 145us; 147us; 149us; 151us; 153us; 155us; 158us; 160us; 162us; 166us; 169us; 171us; 173us; 175us; 178us; 180us; 182us; 184us; 186us; 188us; 190us; 192us; 194us; 196us; 198us; 200us; 202us; 204us; 207us; 210us; 212us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 230us; 232us; 234us; 237us; 239us; 241us; 243us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 273us; 275us; 277us; 280us; 283us; 286us; 288us; 290us; 292us; 294us; 296us; 298us; 300us; 302us; 305us; 307us; 309us; 312us; 315us; 318us; 320us; 322us; 324us; 326us; |]
let _fsyacc_action_rows = 122
let _fsyacc_actionTableElements = [|15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 0us; 49152us; 6us; 16385us; 1us; 13us; 2us; 14us; 3us; 15us; 11us; 11us; 12us; 12us; 18us; 10us; 4us; 16386us; 4us; 21us; 5us; 23us; 20us; 17us; 21us; 19us; 6us; 16387us; 1us; 13us; 2us; 14us; 3us; 15us; 11us; 11us; 12us; 12us; 18us; 10us; 6us; 16388us; 1us; 13us; 2us; 14us; 3us; 15us; 11us; 11us; 12us; 12us; 18us; 10us; 6us; 16389us; 1us; 13us; 2us; 14us; 3us; 15us; 11us; 11us; 12us; 12us; 18us; 10us; 6us; 16390us; 1us; 13us; 2us; 14us; 3us; 15us; 11us; 11us; 12us; 12us; 18us; 10us; 6us; 16391us; 1us; 13us; 2us; 14us; 3us; 15us; 11us; 11us; 12us; 12us; 18us; 10us; 6us; 16392us; 1us; 13us; 2us; 14us; 3us; 15us; 11us; 11us; 12us; 12us; 18us; 10us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 15us; 16393us; 6us; 71us; 14us; 52us; 16us; 66us; 22us; 26us; 23us; 29us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 15us; 16394us; 6us; 71us; 14us; 52us; 16us; 66us; 22us; 26us; 23us; 29us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 15us; 16395us; 6us; 71us; 14us; 52us; 16us; 66us; 22us; 26us; 23us; 29us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 15us; 16396us; 6us; 71us; 14us; 52us; 16us; 66us; 22us; 26us; 23us; 29us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 15us; 16397us; 6us; 71us; 14us; 52us; 16us; 66us; 22us; 26us; 23us; 29us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 0us; 16398us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 0us; 16399us; 0us; 16400us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 0us; 16401us; 1us; 16402us; 24us; 32us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 0us; 16403us; 3us; 16404us; 8us; 43us; 19us; 46us; 24us; 35us; 13us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 0us; 16405us; 2us; 16406us; 8us; 43us; 19us; 46us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 0us; 16407us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 0us; 16408us; 0us; 16409us; 15us; 16425us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 2us; 32768us; 9us; 45us; 13us; 82us; 0us; 16410us; 0us; 16411us; 2us; 16412us; 13us; 53us; 14us; 56us; 1us; 16412us; 14us; 56us; 12us; 32768us; 6us; 71us; 14us; 63us; 16us; 66us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 1us; 32768us; 25us; 51us; 0us; 16413us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 12us; 32768us; 6us; 71us; 14us; 63us; 16us; 66us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 1us; 32768us; 15us; 55us; 0us; 16414us; 12us; 32768us; 6us; 71us; 14us; 63us; 16us; 66us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 1us; 32768us; 13us; 58us; 12us; 32768us; 6us; 71us; 14us; 63us; 16us; 66us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 1us; 32768us; 15us; 60us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 1us; 32768us; 15us; 65us; 0us; 16418us; 16us; 16425us; 6us; 71us; 8us; 75us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 2us; 32768us; 13us; 82us; 17us; 68us; 0us; 16419us; 2us; 32768us; 8us; 78us; 17us; 70us; 0us; 16420us; 1us; 32768us; 28us; 72us; 1us; 32768us; 7us; 73us; 0us; 16421us; 0us; 16422us; 15us; 16425us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 2us; 32768us; 9us; 77us; 13us; 82us; 0us; 16423us; 15us; 16425us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 2us; 32768us; 9us; 80us; 13us; 82us; 0us; 16424us; 0us; 16426us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 2us; 32768us; 35us; 94us; 36us; 93us; 1us; 32768us; 13us; 97us; 2us; 32768us; 35us; 94us; 36us; 93us; 1us; 32768us; 27us; 99us; 0us; 16439us; 1us; 32768us; 8us; 101us; 1us; 32768us; 28us; 102us; 2us; 32768us; 9us; 103us; 13us; 104us; 0us; 16440us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 1us; 32768us; 9us; 106us; 0us; 16441us; 1us; 32768us; 8us; 108us; 1us; 32768us; 30us; 100us; 1us; 32768us; 9us; 110us; 0us; 16442us; 1us; 16443us; 13us; 112us; 1us; 32768us; 30us; 100us; 0us; 16444us; 1us; 32768us; 8us; 115us; 1us; 32768us; 28us; 116us; 2us; 32768us; 9us; 117us; 13us; 118us; 0us; 16445us; 15us; 32768us; 6us; 71us; 14us; 52us; 16us; 66us; 20us; 40us; 21us; 38us; 25us; 49us; 26us; 95us; 28us; 88us; 29us; 121us; 30us; 100us; 31us; 107us; 32us; 114us; 33us; 74us; 35us; 94us; 36us; 93us; 1us; 32768us; 9us; 120us; 0us; 16446us; 0us; 16447us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 16us; 17us; 24us; 29us; 36us; 43us; 50us; 57us; 64us; 71us; 87us; 103us; 119us; 135us; 151us; 167us; 183us; 199us; 215us; 231us; 247us; 263us; 279us; 295us; 311us; 312us; 328us; 329us; 330us; 346us; 347us; 349us; 365us; 366us; 370us; 384us; 385us; 388us; 404us; 405us; 421us; 422us; 423us; 439us; 442us; 443us; 444us; 447us; 449us; 462us; 464us; 465us; 481us; 494us; 496us; 497us; 510us; 512us; 525us; 527us; 528us; 529us; 530us; 546us; 548us; 549us; 566us; 569us; 570us; 573us; 574us; 576us; 578us; 579us; 580us; 596us; 599us; 600us; 616us; 619us; 620us; 621us; 637us; 638us; 639us; 640us; 641us; 642us; 643us; 644us; 645us; 646us; 647us; 648us; 649us; 652us; 654us; 657us; 659us; 660us; 662us; 664us; 667us; 668us; 684us; 686us; 687us; 689us; 691us; 693us; 694us; 696us; 698us; 699us; 701us; 703us; 706us; 707us; 723us; 725us; 726us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 3us; 3us; 3us; 1us; 3us; 2us; 3us; 1us; 3us; 1us; 3us; 1us; 2us; 2us; 1us; 4us; 2us; 1us; 3us; 5us; 6us; 1us; 1us; 3us; 3us; 3us; 3us; 1us; 3us; 4us; 0us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 5us; 4us; 6us; 4us; 1us; 3us; 4us; 6us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 8us; 8us; 8us; 9us; 9us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 17us; 18us; 19us; 19us; 20us; 21us; 21us; 22us; 22us; 23us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16398us; 65535us; 16399us; 16400us; 65535us; 16401us; 65535us; 65535us; 16403us; 65535us; 65535us; 16405us; 65535us; 65535us; 16407us; 65535us; 16408us; 16409us; 65535us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 16415us; 16416us; 16417us; 65535us; 65535us; 16418us; 65535us; 65535us; 16419us; 65535us; 16420us; 65535us; 65535us; 16421us; 16422us; 65535us; 65535us; 16423us; 65535us; 65535us; 16424us; 16426us; 65535us; 16427us; 16428us; 16429us; 16430us; 16431us; 16432us; 16433us; 16434us; 16435us; 16436us; 16437us; 16438us; 65535us; 65535us; 65535us; 65535us; 16439us; 65535us; 65535us; 65535us; 16440us; 65535us; 65535us; 16441us; 65535us; 65535us; 65535us; 16442us; 65535us; 65535us; 16444us; 65535us; 65535us; 65535us; 16445us; 65535us; 65535us; 16446us; 16447us; |]
let _fsyacc_reductions ()  =    [| 
# 380 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startexpr));
# 389 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'relnexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                       _1 
                   )
# 32 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : Expr));
# 400 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'plusexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                           makeplus _1 
                   )
# 34 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'relnexpr));
# 411 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'relnexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'relnexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                               new CompositeExpr(WellKnownSym.equals, [|_1; _3|]) :> Expr 
                   )
# 35 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'relnexpr));
# 423 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'relnexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'relnexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                               new CompositeExpr(WellKnownSym.lessthan, [|_1; _3|]) :> Expr 
                   )
# 36 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'relnexpr));
# 435 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'relnexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'relnexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                               new CompositeExpr(WellKnownSym.greaterthan, [|_1; _3|]) :> Expr 
                   )
# 37 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'relnexpr));
# 447 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'relnexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'relnexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                               new CompositeExpr(WellKnownSym.lessequals, [|_1; _3|]) :> Expr 
                   )
# 38 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'relnexpr));
# 459 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'relnexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'relnexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                               new CompositeExpr(WellKnownSym.greaterequals, [|_1; _3|]) :> Expr 
                   )
# 39 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'relnexpr));
# 471 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'relnexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'relnexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                               new CompositeExpr(WellKnownSym.notequals, [|_1; _3|]) :> Expr 
                   )
# 40 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'relnexpr));
# 483 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'timesexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                            [maketimes _1] 
                   )
# 42 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'plusexpr));
# 494 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'plusexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'timesexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                  _1 @ [maketimes _3] 
                   )
# 43 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'plusexpr));
# 506 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'plusexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'timesexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                   _1 @ [(new CompositeExpr(WellKnownSym.minus, [|maketimes(_3)|]) :> Expr)] 
                   )
# 44 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'plusexpr));
# 518 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'plusexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'timesexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                _1 @ [(new CompositeExpr(WellKnownSym.plusminus, [|maketimes(_3)|]) :> Expr)] 
                   )
# 45 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'plusexpr));
# 530 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'plusexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'timesexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                _1 @ [(new CompositeExpr(WellKnownSym.minusplus, [|maketimes(_3)|]) :> Expr)] 
                   )
# 46 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'plusexpr));
# 542 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'powerexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                             [_1] 
                   )
# 48 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'timesexpr));
# 553 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'timesexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'powerexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                    _1 @ [_3] 
                   )
# 49 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'timesexpr));
# 565 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'timesexpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'nonpfxpowerexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                    _1 @ [_2] 
                   )
# 50 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'timesexpr));
# 577 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'timesexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'powerexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                     _1 @ [(new CompositeExpr(WellKnownSym.divide, [|_3|]) :> Expr)] 
                   )
# 51 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'timesexpr));
# 589 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prefixexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                              _1 
                   )
# 53 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'powerexpr));
# 600 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prefixexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'powerexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                   new CompositeExpr(WellKnownSym.power, [|_1; _3|]) :> Expr 
                   )
# 54 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'powerexpr));
# 612 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'postfixexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                     _1 
                   )
# 56 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'nonpfxpowerexpr));
# 623 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'postfixexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'nonpfxpowerexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                          new CompositeExpr(WellKnownSym.power, [|_1; _3|]) :> Expr 
                   )
# 57 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'nonpfxpowerexpr));
# 635 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'postfixexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                _1 
                   )
# 59 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'prefixexpr));
# 646 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'prefixexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                           match _2 with :? DoubleNumber as dn -> new DoubleNumber(-dn.Num) :> Expr | _ -> new CompositeExpr(WellKnownSym.minus, [|_2|]) :> Expr 
                   )
# 60 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'prefixexpr));
# 657 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'prefixexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                          _2 
                   )
# 61 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'prefixexpr));
# 668 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                 _1 
                   )
# 63 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'postfixexpr));
# 679 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'postfixexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arglist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                      new CompositeExpr(_1, Array.of_list _3) :> Expr 
                   )
# 64 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'postfixexpr));
# 691 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'postfixexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                           new CompositeExpr(WellKnownSym.factorial, [|_1|]) :> Expr 
                   )
# 65 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'postfixexpr));
# 702 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryexprnovb)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                     _1
                   )
# 67 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'primaryexpr));
# 713 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryexprnovb)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                new CompositeExpr(WellKnownSym.magnitude, [|_2|]) :> Expr 
                   )
# 68 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'primaryexpr));
# 724 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryexprnovb)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryexprnovb)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                                      new CompositeExpr(WellKnownSym.point, [|_2;_4|]) :> Expr 
                   )
# 69 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'primaryexpr));
# 736 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryexprnovb)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryexprnovb)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryexprnovb)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                                                      new CompositeExpr(_1, [|_3;_5|]) :> Expr 
                   )
# 70 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'primaryexpr));
# 749 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sym)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                             _1 
                   )
# 71 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'primaryexprnovb));
# 760 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'number)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                 _1 
                   )
# 72 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'primaryexprnovb));
# 771 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                     _2 
                   )
# 73 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'primaryexprnovb));
# 782 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arglist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                          new ArrayExpr(Array.of_list _2) :> Expr 
                   )
# 74 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'primaryexprnovb));
# 793 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arrlist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                          new ArrayExpr(_2) :> Expr 
                   )
# 75 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'primaryexprnovb));
# 804 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                       new ErrorMsgExpr(_2) :> Expr 
                   )
# 76 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'primaryexprnovb));
# 815 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                               new NullExpr() :> Expr 
                   )
# 77 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'primaryexprnovb));
# 825 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arglist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                 Array2D.init 1 _2.Length (fun i j -> _2.[j]) 
                   )
# 79 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'arrlist));
# 836 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arrlist)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arglist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                  Array2D.init (1 + Array2D.length1 _1) (Array2D.length2 _1) (fun i j -> if i < Array2D.length1 _1 then _1.[i,j] else _3.[j]) 
                   )
# 80 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'arrlist));
# 848 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                 [] 
                   )
# 82 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'arglist));
# 858 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                               [_1] 
                   )
# 83 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'arglist));
# 869 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arglist)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                             _1 @ [_3] 
                   )
# 84 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'arglist));
# 881 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lettersym)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                       _1 :> Expr 
                   )
# 86 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'sym));
# 892 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'groupedlettersym)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                           _1 :> Expr 
                   )
# 87 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'sym));
# 903 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'wordsym)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                  _1 :> Expr 
                   )
# 88 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'sym));
# 914 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'wellknownsym)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                       _1 :> Expr 
                   )
# 89 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'sym));
# 925 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                             if(_1.Length <> 1) then new WordSym(_1) :> Expr else new LetterSym(_1.[0]) :> Expr 
                   )
# 90 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'sym));
# 936 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'realnumber)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                           _1 :> Expr 
                   )
# 92 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'number));
# 947 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'complexnumber)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                        _1 :> Expr 
                   )
# 93 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'number));
# 958 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'doublenumber)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                 _1 :> RealNumber 
                   )
# 95 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'realnumber));
# 969 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'integernumber)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                        _1 :> RealNumber 
                   )
# 96 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'realnumber));
# 980 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                             new DoubleNumber(_1) 
                   )
# 98 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'doublenumber));
# 991 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                               new IntegerNumber(new BigInt(_1)) 
                   )
# 100 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'integernumber));
# 1002 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'realnumber)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'realnumber)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                                           new ComplexNumber(_2, _4) 
                   )
# 102 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'complexnumber));
# 1014 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                        new LetterSym(_3.[0]) 
                   )
# 104 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'lettersym));
# 1025 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                          let ls = new LetterSym(_3.[0]) in ls.Subscript <- _5; ls 
                   )
# 105 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'lettersym));
# 1037 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lettersymlist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                                                 new GroupedLetterSym(Array.of_list _3) 
                   )
# 107 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'groupedlettersym));
# 1048 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lettersym)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                 [_1] 
                   )
# 109 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'lettersymlist));
# 1059 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lettersym)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lettersymlist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                        [_1] @ _3 
                   )
# 110 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'lettersymlist));
# 1071 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                    new WordSym(_3) 
                   )
# 112 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'wordsym));
# 1082 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                                        let ws = new WordSym(_3) in ws.Subscript <- _5; ws 
                   )
# 113 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'wordsym));
# 1094 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                                          new WellKnownSym(Enum.Parse(typeof<WKSID>, _1) :?> WKSID) 
                   )
# 115 "C:\Bo\MathSemanticParser\ExprText\TextParser.fsy"
                 : 'wellknownsym));
|]
# 1106 "C:\Bo\MathSemanticParser\ExprText\TextParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 40;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let expr lexer lexbuf : Expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
