#region Query Mode

        public object QueryWhat(Expr rootExpr, Expr currExpr)
        {
            QueryMode mode = UpdateQuery(rootExpr, QueryMode.What);

            if (mode == QueryMode.WhatOnKnowledge)
            {
                return CurrKnowledge.Value;
            }
            else if (mode == QueryMode.WhatOnProperty)
            {
                return CurrQuery.PropertyAnswerExpr;
            }
            else
            {
                return null;
            }
        }

        public string QueryStrategy(Expr rootExpr, Expr currExpr)
        {
            QueryMode mode = UpdateQuery(rootExpr, QueryMode.Strategy);

            if (mode == QueryMode.StrategyOnKnowledge)
            {
                return CurrKnowledge.Value.RetrieveCurrStrategyHint(currExpr);
            }
            else if (mode == QueryMode.StrategyOnProperty)
            {                
                int index = CurrQuery.Tracers.FindIndex(x => x.Source.Equals(currExpr));

                if (index == -1)
                {
                    AGKnowledgeTracer firstTrace = CurrQuery.Tracers[0];
                    return firstTrace.StrategyHints;
                }
                else
                {
                    return CurrQuery.RetrieveCurrStrategyHint(currExpr);
                }
            }
            else
            {
                return "No Strategy";
            }
        }

        public string QueryWhy(Expr rootExpr, Expr currExpr)
        {
            QueryMode mode = UpdateQuery(rootExpr, QueryMode.Why);

            if (mode == QueryMode.WhyOnKnowledge)
            {
                return CurrKnowledge.Value.RetrieveCurrWhyHint(currExpr);
            }
            else if (mode == QueryMode.WhyOnProperty)
            {
                int index = CurrQuery.Tracers.FindIndex(x => x.Source.Equals(currExpr));

                if (index == -1)
                {
                    AGKnowledgeTracer firstTrace = CurrQuery.Tracers[0];                    
                    return firstTrace.WhyHints;
                }
                else
                {
                    return CurrQuery.RetrieveCurrWhyHint(currExpr);
                }
            }
            else
            {
                return "No Why Hint";
            }                                    
        }

        public Expr QueryHow(Expr rootExpr, Expr currExpr, out string appliedRule, out bool isLastTrace)
        {
            isLastTrace = false;
            QueryMode mode = UpdateQuery(rootExpr, QueryMode.How);

            if (mode == QueryMode.HowOnKnowledge)
            {
                return CurrKnowledge.Value.RetrieveHow(currExpr, out appliedRule, out isLastTrace);
            }
            else if (mode == QueryMode.HowOnProperty)
            {
                if (IsLastTrace)
                {
                    appliedRule = "Nothing";
                    return null;
                }

                int index = CurrQuery.Tracers.FindIndex(x => x.Source.Equals(currExpr));

                if (index == -1)
                {
                    AGKnowledgeTracer firstTrace = CurrQuery.Tracers[0];
                    appliedRule = firstTrace.AppliedRule;
                    return firstTrace.Target;
                }
                else
                {
                    Expr returnExpr =  CurrQuery.RetrieveHow(currExpr, out appliedRule, out isLastTrace);
                    IsLastTrace = isLastTrace;
                    return returnExpr;
                }                    
            }
            else
            {
                appliedRule = "Nothing";
                return null;
            }                        
        }

        public bool QueryVerify(Expr currExpr, out Expr preExpr)
        {
            preExpr = null;

            /*
            preExpr = null;
            Expr wrongExpr;
            if (FakeStepSatisfied(currExpr, out wrongExpr)) // correct
            {
                //find preExpr: fake now
                preExpr = CurrKnowledge.Value.RetrieveCurrExpr();
                return true;
            }
            else // wrong
            {
                return false;
            }*/

            Expr wrongExpr;
            if (FakeStepSatisfied(currExpr, out wrongExpr))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        private QueryMode UpdateQuery(Expr expr, QueryMode inputMode)
        {
            if (CurrKnowledge.Key != null && expr.Equals(CurrKnowledge.Key))
            {
                return SelectKnowledgeMode(inputMode);                
            }

            CurrKnowledge = Knowledge.FirstOrDefault(x => x.Key.Equals(expr));
            if (!CurrKnowledge.Equals(default(KeyValuePair<Expr, IKnowledgeExpr>)))
            {
                return SelectKnowledgeMode(inputMode);
            }

            if (CurrQuery.PropertyExpr.Equals(expr))
            {
                return SelectPropertyMode(inputMode);
            }

            CurrQuery = QueryProperties.Find(x => x.PropertyExpr.Equals(expr));
            if (CurrQuery != null)
            {
                return SelectPropertyMode(inputMode);
            }

            return QueryMode.None;
        }

        private QueryMode SelectKnowledgeMode(QueryMode inputMode)
        {
            switch (inputMode)
            {
                case QueryMode.What:
                    return QueryMode.WhatOnKnowledge;
                case QueryMode.How:
                    return QueryMode.HowOnKnowledge;
                case QueryMode.Strategy:
                    return QueryMode.StrategyOnKnowledge;
                case QueryMode.Why:
                    return QueryMode.WhyOnKnowledge;
                default:
                    return QueryMode.None;
            }
        }

        private QueryMode SelectPropertyMode(QueryMode inputMode)
        {
            switch (inputMode)
            {
                case QueryMode.What:
                    return QueryMode.WhatOnProperty;
                case QueryMode.How:
                    return QueryMode.HowOnProperty;
                case QueryMode.Strategy:
                    return QueryMode.StrategyOnProperty;
                case QueryMode.Why:
                    return QueryMode.WhyOnProperty;
                default:
                    return QueryMode.None;
            }                                    
        }

        #endregion